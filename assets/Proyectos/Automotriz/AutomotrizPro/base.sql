COLUMN apellido FORMAT A10;

COLUMN modelo FORMAT A17;

COLUMN descripcion FORMAT A20;

COLUMN matricula FORMAT A10;

COLUMN nombre_cliente FORMAT A12;

COLUMN nombre_provincia FORMAT A20;

COLUMN apellido_cliente FORMAT A10;

COLUMN barriada FORMAT A10;

COLUMN nombre FORMAT A20;

COLUMN ciudad FORMAT A20;

COLUMN num_telefono FORMAT A10;

COLUMN tipo_telefono FORMAT A10;

COLUMN email FORMAT A20;

COLUMN tipo_email FORMAT A20;

COLUMN 'Nombre Cliente' FORMAT A20;

SET PAGESIZE 1000;

SET LINES 1000;

SET SERVEROUTPUT ON;

CREATE SEQUENCE SEQ_TIPOS_EMAIL_CLIENTE START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_TIPOS_TEL_CLIENTE START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_CLIENTE START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_AUTOMOVIL START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_CITA START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_ESTADO_ORDEN START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_ORDEN_TRABAJO START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_FACTURA START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_SERVICIO START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_TIPOS_EMAIL_MECANICO START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_TIPOS_TEL_MECANICO START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_MECANICO START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_PROVINCIA START WITH 10001 INCREMENT BY 1;

CREATE SEQUENCE SEQ_HISTORIAL_ERRORES START WITH 1 INCREMENT BY 1;

CREATE SEQUENCE SEQ_AUD_COD START WITH 1 INCREMENT BY 1;

CREATE TABLE HISTORIAL_ERRORES (
	ERROR_ID NUMBER PRIMARY KEY,
	DESCRIPCION VARCHAR2(100) NOT NULL
);

CREATE TABLE PROVINCIA (
	ID_PROVINCIA NUMBER PRIMARY KEY,
	NOMBRE VARCHAR2(50) NOT NULL
);

CREATE TABLE TIPOS_EMAIL_CLIENTE (
	ID_EMAIL_CLIENTE NUMBER PRIMARY KEY,
	DESCRIPCION VARCHAR2(255) NOT NULL
);

CREATE TABLE TIPOS_TEL_CLIENTE (
	ID_TEL_CLIENTE NUMBER PRIMARY KEY,
	DESCRIPCION VARCHAR2(255) NOT NULL
);

CREATE TABLE CLIENTE (
	ID_CLIENTE NUMBER PRIMARY KEY,
	ID_PROVINCIA NUMBER,
	NOMBRE VARCHAR2(100) NOT NULL,
	APELLIDO VARCHAR2(100) NOT NULL,
	CIP VARCHAR2(30) UNIQUE NOT NULL,
	BARRIADA VARCHAR2(100),
	CIUDAD VARCHAR2(100),
	FOREIGN KEY (ID_PROVINCIA) REFERENCES PROVINCIA(ID_PROVINCIA)
);

CREATE TABLE CLIENTE_TEL (
	ID_CLIENTE NUMBER,
	ID_TEL_CLIENTE NUMBER,
	NUM_TELEFONO VARCHAR2(255),
	PRIMARY KEY (ID_CLIENTE, ID_TEL_CLIENTE),
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
	FOREIGN KEY (ID_TEL_CLIENTE) REFERENCES TIPOS_TEL_CLIENTE(ID_TEL_CLIENTE)
);

CREATE TABLE CLIENTE_EMAIL (
	ID_CLIENTE NUMBER,
	ID_EMAIL_CLIENTE NUMBER,
	EMAIL VARCHAR2(255),
	PRIMARY KEY (ID_CLIENTE, ID_EMAIL_CLIENTE),
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
	FOREIGN KEY (ID_EMAIL_CLIENTE) REFERENCES TIPOS_EMAIL_CLIENTE(ID_EMAIL_CLIENTE)
);

CREATE TABLE AUTOMOVIL (
	ID_AUTOMOVIL NUMBER PRIMARY KEY,
	ID_CLIENTE NUMBER NOT NULL,
	MODELO VARCHAR2(100) NOT NULL,
	MATRICULA VARCHAR2(50) NOT NULL,
	MARCA VARCHAR2(100) NOT NULL,
	COLOR VARCHAR2(50),
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE)
);

CREATE TABLE CITA (
	ID_CITA NUMBER NOT NULL PRIMARY KEY,
	ID_CLIENTE NUMBER NOT NULL,
	FECHA_SOLICITUD DATE NOT NULL,
	FECHA_ASIGNACION DATE,
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE)
);

CREATE TABLE ESTADO_ORDEN (
	ID_ESTADO_ORDEN NUMBER PRIMARY KEY,
	DESCRIPCION VARCHAR2(255)
);

CREATE TABLE ORDEN_TRABAJO (
	ID_ORDEN NUMBER PRIMARY KEY,
	ID_ESTADO_ORDEN NUMBER NOT NULL,
	ID_CLIENTE NUMBER NOT NULL,
	ID_CITA NUMBER,
	ID_AUTOMOVIL NUMBER NOT NULL,
	FECHA_PUBLICACION DATE NOT NULL,
	FECHA_FIN DATE,
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
	FOREIGN KEY (ID_ESTADO_ORDEN) REFERENCES ESTADO_ORDEN(ID_ESTADO_ORDEN),
	FOREIGN KEY (ID_CITA) REFERENCES CITA(ID_CITA),
	FOREIGN KEY (ID_AUTOMOVIL) REFERENCES AUTOMOVIL(ID_AUTOMOVIL)
);

CREATE TABLE FACTURA (
	ID_FACTURA NUMBER NOT NULL PRIMARY KEY,
	ID_CLIENTE NUMBER NOT NULL,
	ID_ORDEN NUMBER NOT NULL,
	FECHA_EMISION DATE NOT NULL,
	IMPORTE NUMBER(12, 2) NOT NULL,
	IMPUESTO NUMBER(12, 2) NOT NULL,
	TOTAL NUMBER(12, 2) NOT NULL,
	FOREIGN KEY (ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE),
	FOREIGN KEY (ID_ORDEN) REFERENCES ORDEN_TRABAJO(ID_ORDEN)
);

CREATE TABLE SERVICIO (
	ID_SERVICIO NUMBER PRIMARY KEY,
	DESCRIPCION VARCHAR2(255) NOT NULL,
	COSTO NUMBER(12, 2) NOT NULL
);

CREATE TABLE ORDEN_SERVICIO (
	ID_ORDEN NUMBER,
	ID_SERVICIO NUMBER,
	COSTO_PERSONALIZADO NUMBER(12, 2) NOT NULL,
	PRIMARY KEY (ID_ORDEN, ID_SERVICIO),
	FOREIGN KEY (ID_ORDEN) REFERENCES ORDEN_TRABAJO(ID_ORDEN),
	FOREIGN KEY (ID_SERVICIO) REFERENCES SERVICIO(ID_SERVICIO)
);

CREATE TABLE TIPOS_EMAIL_MECANICO (
	ID_EMAIL_MECANICO NUMBER PRIMARY KEY,
	DESCRIPCION VARCHAR2(255) NOT NULL
);

CREATE TABLE TIPOS_TEL_MECANICO (
	ID_TEL_MECANICO NUMBER PRIMARY KEY,
	DESCRIPCION VARCHAR2(255) NOT NULL
);

CREATE TABLE MECANICO (
	ID_MECANICO NUMBER PRIMARY KEY,
	ID_PROVINCIA NUMBER,
	NOMBRE VARCHAR2(100) NOT NULL,
	APELLIDO VARCHAR2(100) NOT NULL,
	CIUDAD VARCHAR2(100),
	BARRIADA VARCHAR2(100),
	CIP VARCHAR2(20) UNIQUE,
	FOREIGN KEY (ID_PROVINCIA) REFERENCES PROVINCIA(ID_PROVINCIA)
);

CREATE TABLE MECANICO_TEL (
	ID_MECANICO NUMBER,
	ID_TEL_MECANICO NUMBER,
	NUM_TELEFONO VARCHAR2(255),
	PRIMARY KEY (ID_MECANICO, ID_TEL_MECANICO),
	FOREIGN KEY (ID_MECANICO) REFERENCES MECANICO(ID_MECANICO),
	FOREIGN KEY (ID_TEL_MECANICO) REFERENCES TIPOS_TEL_MECANICO(ID_TEL_MECANICO)
);

CREATE TABLE MECANICO_EMAIL (
	ID_MECANICO NUMBER,
	ID_EMAIL_MECANICO NUMBER,
	EMAIL VARCHAR2(255),
	PRIMARY KEY (ID_MECANICO, ID_EMAIL_MECANICO),
	FOREIGN KEY (ID_MECANICO) REFERENCES MECANICO(ID_MECANICO),
	FOREIGN KEY (ID_EMAIL_MECANICO) REFERENCES TIPOS_EMAIL_MECANICO(ID_EMAIL_MECANICO)
);

CREATE TABLE ASIGNACIONES (
	ID_MECANICO NUMBER,
	ID_ORDEN NUMBER,
	FECHA_ASIGNACION DATE NOT NULL,
	PRIMARY KEY (ID_MECANICO, ID_ORDEN),
	FOREIGN KEY (ID_MECANICO) REFERENCES MECANICO(ID_MECANICO),
	FOREIGN KEY (ID_ORDEN) REFERENCES ORDEN_TRABAJO(ID_ORDEN)
);

CREATE TABLE AUD_ORDENES_TRABAJO(
	AUD_COD NUMBER PRIMARY KEY,
	AUD_ID_ORDEN NUMBER NOT NULL,
	AUD_ID_ESTADO_ORDEN NUMBER NOT NULL,
	AUD_ID_CLIENTE NUMBER NOT NULL,
	AUD_ID_CITA NUMBER NOT NULL,
	AUD_ID_AUTOMOVIL NUMBER NOT NULL,
	AUD_FECHA_PUBLICACION DATE NOT NULL,
	AUD_FECHA_FIN DATE NOT NULL,
	AUD_FECHA_MODIFICACION VARCHAR2(30),
	AUD_ACCION_REALIZADA VARCHAR2(20) NOT NULL
);

-- Prueba
-- Insertar datos en la tabla provincia
INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Bocas del Toro'
);

INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Chiriqui'
);

INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Cocle'
);

INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Colon'
);

INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Darien'
);

INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Herrera'
);

INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Los Santos'
);

INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Panama'
);

INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Panama Oeste'
);

INSERT INTO PROVINCIA (
	ID_PROVINCIA,
	NOMBRE
) VALUES (
	SEQ_PROVINCIA.NEXTVAL,
	'Veraguas'
);

-- Insertar datos en la tabla tipos_tel_cliente
INSERT INTO TIPOS_TEL_CLIENTE (
	ID_TEL_CLIENTE,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_TEL_CLIENTE.NEXTVAL,
	'Celular'
);

INSERT INTO TIPOS_TEL_CLIENTE (
	ID_TEL_CLIENTE,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_TEL_CLIENTE.NEXTVAL,
	'Fijo'
);

INSERT INTO TIPOS_TEL_CLIENTE (
	ID_TEL_CLIENTE,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_TEL_CLIENTE.NEXTVAL,
	'Trabajo'
);

INSERT INTO TIPOS_TEL_CLIENTE (
	ID_TEL_CLIENTE,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_TEL_CLIENTE.NEXTVAL,
	'Otro'
);

-- Insertar datos en la tabla tipos_email_cliente
INSERT INTO TIPOS_EMAIL_CLIENTE (
	ID_EMAIL_CLIENTE,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_EMAIL_CLIENTE.NEXTVAL,
	'Personal'
);

INSERT INTO TIPOS_EMAIL_CLIENTE (
	ID_EMAIL_CLIENTE,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_EMAIL_CLIENTE.NEXTVAL,
	'Trabajo'
);

INSERT INTO TIPOS_EMAIL_CLIENTE (
	ID_EMAIL_CLIENTE,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_EMAIL_CLIENTE.NEXTVAL,
	'Otro'
);

-- Insertar datos en la tabla tipos_tel_mecanico
INSERT INTO TIPOS_TEL_MECANICO (
	ID_TEL_MECANICO,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_TEL_MECANICO.NEXTVAL,
	'Celular'
);

INSERT INTO TIPOS_TEL_MECANICO (
	ID_TEL_MECANICO,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_TEL_MECANICO.NEXTVAL,
	'Fijo'
);

INSERT INTO TIPOS_TEL_MECANICO (
	ID_TEL_MECANICO,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_TEL_MECANICO.NEXTVAL,
	'Trabajo'
);

INSERT INTO TIPOS_TEL_MECANICO (
	ID_TEL_MECANICO,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_TEL_MECANICO.NEXTVAL,
	'Otro'
);

-- Insertar datos en la tabla tipos_email_mecanico
INSERT INTO TIPOS_EMAIL_MECANICO (
	ID_EMAIL_MECANICO,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_EMAIL_MECANICO.NEXTVAL,
	'Personal'
);

INSERT INTO TIPOS_EMAIL_MECANICO (
	ID_EMAIL_MECANICO,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_EMAIL_MECANICO.NEXTVAL,
	'Trabajo'
);

INSERT INTO TIPOS_EMAIL_MECANICO (
	ID_EMAIL_MECANICO,
	DESCRIPCION
) VALUES (
	SEQ_TIPOS_EMAIL_MECANICO.NEXTVAL,
	'Otro'
);

-- Insertar datos en la tabla estado_orden
INSERT INTO ESTADO_ORDEN (
	ID_ESTADO_ORDEN,
	DESCRIPCION
) VALUES (
	SEQ_ESTADO_ORDEN.NEXTVAL,
	'Pendiente'
);

INSERT INTO ESTADO_ORDEN (
	ID_ESTADO_ORDEN,
	DESCRIPCION
) VALUES (
	SEQ_ESTADO_ORDEN.NEXTVAL,
	'En Proceso'
);

INSERT INTO ESTADO_ORDEN (
	ID_ESTADO_ORDEN,
	DESCRIPCION
) VALUES (
	SEQ_ESTADO_ORDEN.NEXTVAL,
	'Completada'
);

INSERT INTO ESTADO_ORDEN (
	ID_ESTADO_ORDEN,
	DESCRIPCION
) VALUES (
	SEQ_ESTADO_ORDEN.NEXTVAL,
	'Cancelada'
);

/*Procedimientos*/

CREATE OR REPLACE PROCEDURE AGREGAR_CLIENTE (
	P_NOMBRE CLIENTE.NOMBRE%TYPE,
	P_APELLIDO CLIENTE.APELLIDO%TYPE,
	P_CIP CLIENTE.CIP%TYPE,
	P_BARRIADA CLIENTE.BARRIADA%TYPE,
	P_CIUDAD CLIENTE.CIUDAD%TYPE,
	P_ID_PROVINCIA CLIENTE.ID_PROVINCIA%TYPE,
	P_TELEFONO CLIENTE_TEL.NUM_TELEFONO%TYPE,
	P_EMAIL CLIENTE_EMAIL.EMAIL%TYPE,
	P_ID_TIPO_TEL TIPOS_TEL_CLIENTE.ID_TEL_CLIENTE%TYPE,
	P_ID_TIPO_EMAIL TIPOS_EMAIL_CLIENTE.ID_EMAIL_CLIENTE%TYPE
) AS
	V_ID_CLIENTE    CLIENTE.ID_CLIENTE%TYPE;
	V_ERROR_MENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
 -- Obtener el próximo valor de la secuencia
	V_ID_CLIENTE := SEQ_CLIENTE.NEXTVAL;
 -- Insertar el nuevo cliente
	INSERT INTO CLIENTE (
		ID_CLIENTE,
		NOMBRE,
		APELLIDO,
		CIP,
		BARRIADA,
		CIUDAD,
		ID_PROVINCIA
	) VALUES (
		V_ID_CLIENTE,
		P_NOMBRE,
		P_APELLIDO,
		P_CIP,
		P_BARRIADA,
		P_CIUDAD,
		P_ID_PROVINCIA
	);
 -- Insertar el teléfono del cliente
	INSERT INTO CLIENTE_TEL (
		ID_CLIENTE,
		ID_TEL_CLIENTE,
		NUM_TELEFONO
	) VALUES (
		V_ID_CLIENTE,
		P_ID_TIPO_TEL,
		P_TELEFONO
	);
 -- Insertar el email del cliente
	INSERT INTO CLIENTE_EMAIL (
		ID_CLIENTE,
		ID_EMAIL_CLIENTE,
		EMAIL
	) VALUES (
		V_ID_CLIENTE,
		P_ID_TIPO_EMAIL,
		P_EMAIL
	);
	DBMS_OUTPUT.PUT_LINE('Cliente registrado correctamente');
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		DBMS_OUTPUT.PUT_LINE('Error: se quiso insertar una llave primaria repetida');
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			'Se quiso insertar una PK repetida'
		);
	WHEN OTHERS THEN
		V_ERROR_MENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERROR_MENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERROR_MENSAJE
		);
END AGREGAR_CLIENTE;
/

CREATE OR REPLACE PROCEDURE AGREGAR_SERVICIO (
	P_DESCRIPCION SERVICIO.DESCRIPCION%TYPE,
	P_COSTO SERVICIO.COSTO%TYPE
) AS
	V_ID_SERVICIO   SERVICIO.ID_SERVICIO%TYPE;
	V_ERROR_MENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
 -- Obtener el próximo valor de la secuencia
	V_ID_SERVICIO := SEQ_SERVICIO.NEXTVAL;
 -- Insertar el nuevo servicio
	INSERT INTO SERVICIO (
		ID_SERVICIO,
		DESCRIPCION,
		COSTO
	) VALUES (
		V_ID_SERVICIO,
		P_DESCRIPCION,
		P_COSTO
	);
	DBMS_OUTPUT.PUT_LINE('Servicio registrado correctamente');
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		DBMS_OUTPUT.PUT_LINE('Error: se quiso insertar una llave primaria repetida');
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			'Se quiso insertar una PK repetida'
		);
	WHEN OTHERS THEN
		V_ERROR_MENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERROR_MENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERROR_MENSAJE
		);
END AGREGAR_SERVICIO;
/

CREATE OR REPLACE PROCEDURE REGISTRAR_AUTOMOVIL (
	P_ID_CLIENTE AUTOMOVIL.ID_CLIENTE%TYPE,
	P_MODELO AUTOMOVIL.MODELO%TYPE,
	P_MATRICULA AUTOMOVIL.MATRICULA%TYPE,
	P_MARCA AUTOMOVIL.MARCA%TYPE,
	P_COLOR AUTOMOVIL.COLOR%TYPE
) AS
	V_ID_AUTOMOVIL  AUTOMOVIL.ID_AUTOMOVIL%TYPE;
	V_ERROR_MENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
	V_ID_AUTOMOVIL := SEQ_AUTOMOVIL.NEXTVAL;
	INSERT INTO AUTOMOVIL (
		ID_AUTOMOVIL,
		ID_CLIENTE,
		MODELO,
		MATRICULA,
		MARCA,
		COLOR
	) VALUES (
		V_ID_AUTOMOVIL,
		P_ID_CLIENTE,
		P_MODELO,
		P_MATRICULA,
		P_MARCA,
		P_COLOR
	);
	DBMS_OUTPUT.PUT_LINE('Automóvil registrado correctamente');
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		DBMS_OUTPUT.PUT_LINE('Error: se quiso insertar una llave primaria repetida');
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			'Se quiso insertar una PK repetida'
		);
	WHEN OTHERS THEN
		V_ERROR_MENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERROR_MENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERROR_MENSAJE
		);
END REGISTRAR_AUTOMOVIL;
/

CREATE OR REPLACE PROCEDURE REGISTRAR_CITA (
	P_ID_CLIENTE CITA.ID_CLIENTE%TYPE,
	P_FECHA_SOLICITUD CITA.FECHA_SOLICITUD%TYPE,
	P_FECHA_ASIGNACION CITA.FECHA_ASIGNACION%TYPE
) AS
	V_ID_CITA       CITA.ID_CITA%TYPE;
	V_ERROR_MENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
	V_ID_CITA := SEQ_CITA.NEXTVAL;
	INSERT INTO CITA (
		ID_CITA,
		ID_CLIENTE,
		FECHA_SOLICITUD,
		FECHA_ASIGNACION
	) VALUES (
		V_ID_CITA,
		P_ID_CLIENTE,
		P_FECHA_SOLICITUD,
		P_FECHA_ASIGNACION
	);
	DBMS_OUTPUT.PUT_LINE('Cita registrada correctamente');
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		DBMS_OUTPUT.PUT_LINE('Error: se quiso insertar una llave primaria repetida');
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			'Se quiso insertar una PK repetida'
		);
	WHEN OTHERS THEN
		V_ERROR_MENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERROR_MENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERROR_MENSAJE
		);
END REGISTRAR_CITA;
/

CREATE OR REPLACE PROCEDURE REGISTRAR_MECANICO (
	P_NOMBRE MECANICO.NOMBRE%TYPE,
	P_APELLIDO MECANICO.APELLIDO%TYPE,
	P_CIP MECANICO.CIP%TYPE,
	P_BARRIADA MECANICO.BARRIADA%TYPE,
	P_CIUDAD MECANICO.CIUDAD%TYPE,
	P_ID_PROVINCIA MECANICO.ID_PROVINCIA%TYPE,
	P_TELEFONO MECANICO_TEL.NUM_TELEFONO%TYPE,
	P_EMAIL MECANICO_EMAIL.EMAIL%TYPE,
	P_ID_TIPO_TEL TIPOS_TEL_MECANICO.ID_TEL_MECANICO%TYPE,
	P_ID_TIPO_EMAIL TIPOS_EMAIL_MECANICO.ID_EMAIL_MECANICO%TYPE
) AS
	V_ID_MECANICO   MECANICO.ID_MECANICO%TYPE;
	V_ERROR_MENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
 -- Obtener el próximo valor de la secuencia
	V_ID_MECANICO := SEQ_MECANICO.NEXTVAL;
 -- Insertar el nuevo mecánico
	INSERT INTO MECANICO (
		ID_MECANICO,
		NOMBRE,
		APELLIDO,
		CIP,
		BARRIADA,
		CIUDAD,
		ID_PROVINCIA
	) VALUES (
		V_ID_MECANICO,
		P_NOMBRE,
		P_APELLIDO,
		P_CIP,
		P_BARRIADA,
		P_CIUDAD,
		P_ID_PROVINCIA
	);
 -- Insertar el teléfono del mecánico
	INSERT INTO MECANICO_TEL (
		ID_MECANICO,
		ID_TEL_MECANICO,
		NUM_TELEFONO
	) VALUES (
		V_ID_MECANICO,
		P_ID_TIPO_TEL,
		P_TELEFONO
	);
 -- Insertar el email del mecánico
	INSERT INTO MECANICO_EMAIL (
		ID_MECANICO,
		ID_EMAIL_MECANICO,
		EMAIL
	) VALUES (
		V_ID_MECANICO,
		P_ID_TIPO_EMAIL,
		P_EMAIL
	);
	DBMS_OUTPUT.PUT_LINE('Mecánico registrado correctamente');
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		DBMS_OUTPUT.PUT_LINE('Error: se quiso insertar una llave primaria repetida');
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			'Se quiso insertar una PK repetida'
		);
	WHEN OTHERS THEN
		V_ERROR_MENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERROR_MENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERROR_MENSAJE
		);
END REGISTRAR_MECANICO;
/

CREATE OR REPLACE TRIGGER TRG_ORDENES_TRABAJO AFTER
	INSERT OR UPDATE OR DELETE ON ORDEN_TRABAJO FOR EACH ROW
DECLARE
	V_ERRORMENSAJE      HISTORIAL_ERRORES.DESCRIPCION%TYPE;
	V_ACCIONREALIZADA   AUD_ORDENES_TRABAJO.AUD_ACCION_REALIZADA%TYPE;
 -- Se establece la fecha y hora actual
	V_FECHAMODIFICACION AUD_ORDENES_TRABAJO.AUD_FECHA_MODIFICACION%TYPE := TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI:SS');
BEGIN
	IF INSERTING THEN
		V_ACCIONREALIZADA := 'Inserción';
		INSERT INTO AUD_ORDENES_TRABAJO (
			AUD_COD,
			AUD_ID_ORDEN,
			AUD_ID_ESTADO_ORDEN,
			AUD_ID_CLIENTE,
			AUD_ID_CITA,
			AUD_ID_AUTOMOVIL,
			AUD_FECHA_PUBLICACION,
			AUD_FECHA_FIN,
			AUD_FECHA_MODIFICACION,
			AUD_ACCION_REALIZADA
		) VALUES(
			SEQ_AUD_COD.NEXTVAL,
			:NEW.ID_ORDEN,
			:NEW.ID_ESTADO_ORDEN,
			:NEW.ID_CLIENTE,
			:NEW.ID_CITA,
			:NEW.ID_AUTOMOVIL,
			:NEW.FECHA_PUBLICACION,
			:NEW.FECHA_FIN,
			V_FECHAMODIFICACION,
			V_ACCIONREALIZADA
		);
	ELSIF UPDATING THEN
		V_ACCIONREALIZADA := 'Actualización';
		INSERT INTO AUD_ORDENES_TRABAJO (
			AUD_COD,
			AUD_ID_ORDEN,
			AUD_ID_ESTADO_ORDEN,
			AUD_ID_CLIENTE,
			AUD_ID_CITA,
			AUD_ID_AUTOMOVIL,
			AUD_FECHA_PUBLICACION,
			AUD_FECHA_FIN,
			AUD_FECHA_MODIFICACION,
			AUD_ACCION_REALIZADA
		) VALUES(
			SEQ_AUD_COD.NEXTVAL,
			:NEW.ID_ORDEN,
			:NEW.ID_ESTADO_ORDEN,
			:NEW.ID_CLIENTE,
			:NEW.ID_CITA,
			:NEW.ID_AUTOMOVIL,
			:NEW.FECHA_PUBLICACION,
			:NEW.FECHA_FIN,
			V_FECHAMODIFICACION,
			V_ACCIONREALIZADA
		);
	ELSIF DELETING THEN
		V_ACCIONREALIZADA := 'Eliminación';
		INSERT INTO AUD_ORDENES_TRABAJO (
			AUD_COD,
			AUD_ID_ORDEN,
			AUD_ID_ESTADO_ORDEN,
			AUD_ID_CLIENTE,
			AUD_ID_CITA,
			AUD_ID_AUTOMOVIL,
			AUD_FECHA_PUBLICACION,
			AUD_FECHA_FIN,
			AUD_FECHA_MODIFICACION,
			AUD_ACCION_REALIZADA
		) VALUES(
			SEQ_AUD_COD.NEXTVAL,
			:OLD.ID_ORDEN,
			:OLD.ID_ESTADO_ORDEN,
			:OLD.ID_CLIENTE,
			:OLD.ID_CITA,
			:OLD.ID_AUTOMOVIL,
			:OLD.FECHA_PUBLICACION,
			:OLD.FECHA_FIN,
			V_FECHAMODIFICACION,
			V_ACCIONREALIZADA
		);
	END IF;
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		V_ERRORMENSAJE := 'Se ha insertado una llave primaria repetida';
		INSERT INTO HISTORIAL_ERRORES(
			ERROR_ID,
			DESCRIPCION
		) VALUES(
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		INSERT INTO HISTORIAL_ERRORES(
			ERROR_ID,
			DESCRIPCION
		) VALUES(
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END TRG_ORDENES_TRABAJO;
/

CREATE OR REPLACE PROCEDURE REGISTRAR_ORDEN_TRABAJO (
	P_ID_CLIENTE ORDEN_TRABAJO.ID_CLIENTE%TYPE,
	P_ID_ESTADO_ORDEN ORDEN_TRABAJO.ID_ESTADO_ORDEN%TYPE,
	P_ID_CITA ORDEN_TRABAJO.ID_CITA%TYPE,
	P_ID_AUTOMOVIL ORDEN_TRABAJO.ID_AUTOMOVIL%TYPE,
	P_FECHA_PUBLICACION ORDEN_TRABAJO.FECHA_PUBLICACION%TYPE,
	P_FECHA_FIN ORDEN_TRABAJO.FECHA_FIN%TYPE
) AS
	V_ID_ORDEN      ORDEN_TRABAJO.ID_ORDEN%TYPE;
	V_ERROR_MENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
 -- Obtener el próximo valor de la secuencia
	V_ID_ORDEN := SEQ_ORDEN_TRABAJO.NEXTVAL;
 -- Insertar la nueva orden de trabajo
	INSERT INTO ORDEN_TRABAJO (
		ID_ORDEN,
		ID_CLIENTE,
		ID_ESTADO_ORDEN,
		ID_CITA,
		ID_AUTOMOVIL,
		FECHA_PUBLICACION,
		FECHA_FIN
	) VALUES (
		V_ID_ORDEN,
		P_ID_CLIENTE,
		P_ID_ESTADO_ORDEN,
		P_ID_CITA,
		P_ID_AUTOMOVIL,
		P_FECHA_PUBLICACION,
		P_FECHA_FIN
	);
	DBMS_OUTPUT.PUT_LINE('Orden de trabajo registrada correctamente');
EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		DBMS_OUTPUT.PUT_LINE('Error: se quiso insertar una llave primaria repetida');
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			'Se quiso insertar una PK repetida'
		);
	WHEN OTHERS THEN
		V_ERROR_MENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERROR_MENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERROR_MENSAJE
		);
END REGISTRAR_ORDEN_TRABAJO;
/

/*REGISTRO DE LOS SERVICIOS QUE SE REALIZAN EN CADA ORDEN DE TRABAJO*/
CREATE OR REPLACE PROCEDURE REGISTRAR_SERVICIO_ORDEN (
	P_IDORDEN ORDEN_SERVICIO.ID_ORDEN%TYPE,
	P_IDSERVICIO ORDEN_SERVICIO.ID_SERVICIO%TYPE,
	P_COSTOPERSONALIZADO ORDEN_SERVICIO.COSTO_PERSONALIZADO%TYPE
) IS
	V_ISEXISTE         NUMBER;
	V_ERRORMENSAJE     HISTORIAL_ERRORES.DESCRIPCION%TYPE;
	E_NOEXISTEORDEN EXCEPTION;
	E_NOEXISTESERVICIO EXCEPTION;
BEGIN
 -- Se verifica si la orden existe
	SELECT
		COUNT(*) INTO V_ISEXISTE
	FROM
		ORDEN_TRABAJO
	WHERE
		ID_ORDEN = P_IDORDEN;
	IF V_ISEXISTE = 0 THEN
		RAISE E_NOEXISTEORDEN;
	END IF;
 -- Se verifica si el servicio existe
	SELECT
		COUNT(*) INTO V_ISEXISTE
	FROM
		SERVICIO
	WHERE
		ID_SERVICIO = P_IDSERVICIO;
	IF V_ISEXISTE = 0 THEN
		RAISE E_NOEXISTESERVICIO;
	END IF;

	INSERT INTO ORDEN_SERVICIO (
		ID_ORDEN,
		ID_SERVICIO,
		COSTO_PERSONALIZADO
	) VALUES (
		P_IDORDEN,
		P_IDSERVICIO,
		P_COSTOPERSONALIZADO
	);
EXCEPTION
	WHEN E_NOEXISTEORDEN THEN
		V_ERRORMENSAJE := 'No existe la orden de trabajo insertada';
		INSERT INTO HISTORIAL_ERRORES(
			ERROR_ID,
			DESCRIPCION
		) VALUES(
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN E_NOEXISTESERVICIO THEN
		V_ERRORMENSAJE := 'No existe el servicio insertado';
		INSERT INTO HISTORIAL_ERRORES(
			ERROR_ID,
			DESCRIPCION
		) VALUES(
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		INSERT INTO HISTORIAL_ERRORES(
			ERROR_ID,
			DESCRIPCION
		) VALUES(
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END REGISTRAR_SERVICIO_ORDEN;
/

/* Procedimiento para asignar los mecánicos a las órdenes*/
CREATE OR REPLACE PROCEDURE ASIGNAR_MEC_ORDEN (
	P_IDMECANICO ASIGNACIONES.ID_MECANICO%TYPE,
	P_IDORDEN ASIGNACIONES.ID_ORDEN%TYPE,
	P_FECHAASIG ASIGNACIONES.FECHA_ASIGNACION%TYPE
) IS
	V_ISEXISTE         NUMBER;
	V_ERRORMENSAJE     HISTORIAL_ERRORES.DESCRIPCION%TYPE;
	E_NOEXISTEORDEN EXCEPTION;
	E_NOEXISTEMECANICO EXCEPTION;
BEGIN
 -- Se verifica si la orden existe
	SELECT
		COUNT(*) INTO V_ISEXISTE
	FROM
		ORDEN_TRABAJO
	WHERE
		ID_ORDEN = P_IDORDEN;
	IF V_ISEXISTE = 0 THEN
		RAISE E_NOEXISTEORDEN;
	END IF;
 -- Se verifica si el servicio existe
	SELECT
		COUNT(*) INTO V_ISEXISTE
	FROM
		MECANICO
	WHERE
		ID_MECANICO = P_IDMECANICO;
	IF V_ISEXISTE = 0 THEN
		RAISE E_NOEXISTEMECANICO;
	END IF;

	INSERT INTO ASIGNACIONES (
		ID_MECANICO,
		ID_ORDEN,
		FECHA_ASIGNACION
	) VALUES (
		P_IDMECANICO,
		P_IDORDEN,
		P_FECHAASIG
	);
EXCEPTION
	WHEN E_NOEXISTEORDEN THEN
		V_ERRORMENSAJE := 'No existe la orden de trabajo insertada';
		INSERT INTO HISTORIAL_ERRORES(
			ERROR_ID,
			DESCRIPCION
		) VALUES(
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN E_NOEXISTEMECANICO THEN
		V_ERRORMENSAJE := 'No existe el mecánico insertado';
		INSERT INTO HISTORIAL_ERRORES(
			ERROR_ID,
			DESCRIPCION
		) VALUES(
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		INSERT INTO HISTORIAL_ERRORES(
			ERROR_ID,
			DESCRIPCION
		) VALUES(
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END ASIGNAR_MEC_ORDEN;
/

CREATE OR REPLACE FUNCTION FUNC_CALCULAR_INTERES(
	P_MONTO IN NUMBER
) RETURN NUMBER IS
	V_IMPUESTO FACTURA.IMPUESTO%TYPE;
BEGIN
	IF P_MONTO < 0 THEN
		RAISE_APPLICATION_ERROR(-20001, 'El monto no puede ser negativo');
	END IF;

	V_IMPUESTO := P_MONTO * 0.07;
	RETURN V_IMPUESTO;
END;
/

CREATE OR REPLACE PROCEDURE PROC_GENERAR_FACTURA (
	P_IDORDEN IN ORDEN_TRABAJO.ID_ORDEN%TYPE
) IS
	V_IDCLIENTE FACTURA.ID_CLIENTE%TYPE;
	V_SUBTOTAL  FACTURA.IMPORTE%TYPE := 0;
	V_IMPUESTO  FACTURA.IMPUESTO%TYPE := 0;
	V_TOTAL     FACTURA.TOTAL%TYPE := 0;
	CURSOR C_SERVICIOS IS
	SELECT
		COSTO_PERSONALIZADO
	FROM
		ORDEN_SERVICIO
	WHERE
		ID_ORDEN = P_IDORDEN;
BEGIN
	SELECT
		ID_CLIENTE INTO V_IDCLIENTE
	FROM
		ORDEN_TRABAJO
	WHERE
		ID_ORDEN = P_IDORDEN;
 -- Calculamos el subtotal de la factura
	FOR V_SERVICIO IN C_SERVICIOS LOOP
		V_SUBTOTAL := V_SUBTOTAL + V_SERVICIO.COSTO_PERSONALIZADO;
	END LOOP;

	V_IMPUESTO := FUNC_CALCULAR_INTERES(V_SUBTOTAL);
	V_TOTAL := V_SUBTOTAL + V_IMPUESTO;
	INSERT INTO FACTURA (
		ID_FACTURA,
		ID_CLIENTE,
		ID_ORDEN,
		FECHA_EMISION,
		IMPORTE,
		IMPUESTO,
		TOTAL
	) VALUES (
		SEQ_FACTURA.NEXTVAL,
		V_IDCLIENTE,
		P_IDORDEN,
		SYSDATE,
		V_SUBTOTAL,
		V_IMPUESTO,
		V_TOTAL
	);
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('Error: No se encontró el registro');
	WHEN DUP_VAL_ON_INDEX THEN
		DBMS_OUTPUT.PUT_LINE('Error: Se quiso insertar una llave primaria repetida');
	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('Ocurrió un error: '
		                     || SQLERRM);
END;
/

CREATE OR REPLACE PROCEDURE ASIG_ORDEN_PEND_A_MEC IS
	CURSOR C_ORDENES_PENDIENTES IS
	SELECT
		ID_ORDEN
	FROM
		ORDEN_TRABAJO
	WHERE
		ID_ORDEN NOT IN (
			SELECT
				ID_ORDEN
			FROM
				ASIGNACIONES
		)
		AND ID_ESTADO_ORDEN = (
			SELECT
				ID_ESTADO_ORDEN
			FROM
				ESTADO_ORDEN
			WHERE
				DESCRIPCION = 'Pendiente'
		)
	ORDER BY
		FECHA_PUBLICACION DESC;
	V_ID_MECANICO  MECANICO.ID_MECANICO%TYPE;
	V_ERRORMENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
	FOR R_ORDEN IN C_ORDENES_PENDIENTES LOOP
 -- Se obtiene el mecánico con menos asignaciones
		SELECT
			ID_MECANICO INTO V_ID_MECANICO
		FROM
			(
				SELECT
					ID_MECANICO,
					(
						SELECT
							COUNT(*)
						FROM
							ASIGNACIONES
						WHERE
							ID_MECANICO = M.ID_MECANICO
					) AS CARGA_TRABAJO
				FROM
					MECANICO M
				ORDER BY
					CARGA_TRABAJO ASC,
					ID_MECANICO ASC
			)
		WHERE
			ROWNUM = 1;
 -- Se asigna la orden de trabajo al mecánico con menos orden de trabajo
		INSERT INTO ASIGNACIONES (
			ID_MECANICO,
			ID_ORDEN,
			FECHA_ASIGNACION
		) VALUES (
			V_ID_MECANICO,
			R_ORDEN.ID_ORDEN,
			SYSDATE
		);
	END LOOP;
EXCEPTION
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		INSERT INTO HISTORIAL_ERRORES(
			ERROR_ID,
			DESCRIPCION
		) VALUES(
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END ASIG_ORDEN_PEND_A_MEC;
/

--Actualizar la información de los clientes
CREATE OR REPLACE PROCEDURE ACTUALIZAR_CLIENTE (
	P_ID_CLIENTE CLIENTE.ID_CLIENTE%TYPE,
	P_NOMBRE CLIENTE.NOMBRE%TYPE,
	P_APELLIDO CLIENTE.APELLIDO%TYPE,
	P_CIP CLIENTE.CIP%TYPE,
	P_BARRIADA CLIENTE.BARRIADA%TYPE,
	P_CIUDAD CLIENTE.CIUDAD%TYPE,
	P_ID_PROVINCIA CLIENTE.ID_PROVINCIA%TYPE
) AS
	V_ERRORMENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
	UPDATE CLIENTE
	SET
		NOMBRE = P_NOMBRE,
		APELLIDO = P_APELLIDO,
		CIP = P_CIP,
		BARRIADA = P_BARRIADA,
		CIUDAD = P_CIUDAD,
		ID_PROVINCIA = P_ID_PROVINCIA
	WHERE
		ID_CLIENTE = P_ID_CLIENTE;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		V_ERRORMENSAJE := 'No se encontró el ID del cliente'
		                  || P_ID_CLIENTE;
		DBMS_OUTPUT.PUT_LINE(V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END;
/

-- Actualizar la información de los vehículos.
CREATE OR REPLACE PROCEDURE ACTUALIZAR_AUTOMOVIL (
	P_ID_AUTOMOVIL AUTOMOVIL.ID_AUTOMOVIL%TYPE,
	P_MODELO AUTOMOVIL.MODELO%TYPE,
	P_MATRICULA AUTOMOVIL.MATRICULA%TYPE,
	P_MARCA AUTOMOVIL.MARCA%TYPE,
	P_COLOR AUTOMOVIL.COLOR%TYPE
) AS
	V_ERRORMENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
	UPDATE AUTOMOVIL
	SET
		MODELO = P_MODELO,
		MATRICULA = P_MATRICULA,
		MARCA = P_MARCA,
		COLOR = P_COLOR
	WHERE
		ID_AUTOMOVIL = P_ID_AUTOMOVIL;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		V_ERRORMENSAJE := 'No se encontró el ID del automovil '
		                  || P_ID_AUTOMOVIL;
		DBMS_OUTPUT.PUT_LINE(V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END;
/

-- Actualizar la información correspondiente a las citas solicitadas por los clientes.
CREATE OR REPLACE PROCEDURE ACTUALIZAR_CITA (
	P_ID_CITA CITA.ID_CITA%TYPE,
	P_FECHA_ASIGNACION CITA.FECHA_ASIGNACION%TYPE
) AS
	V_ERRORMENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
	UPDATE CITA
	SET
		FECHA_ASIGNACION = P_FECHA_ASIGNACION
	WHERE
		ID_CITA = P_ID_CITA;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		V_ERRORMENSAJE := 'No se encontró el ID de la cita '
		                  || P_ID_CITA;
		DBMS_OUTPUT.PUT_LINE(V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END;
/

-- Actualizar la asignación de mecánicos a las distintas órdenes de trabajo que reciba el taller.
CREATE OR REPLACE PROCEDURE REMOVER_MECANICO (
	P_ID_ORDEN ASIGNACIONES.ID_ORDEN%TYPE,
	P_ID_MECANICO ASIGNACIONES.ID_MECANICO%TYPE
) AS
	V_ERRORMENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
	DELETE FROM ASIGNACIONES
	WHERE
		ID_ORDEN = P_ID_ORDEN
		AND ID_MECANICO = P_ID_MECANICO;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		V_ERRORMENSAJE := 'Error: No se encontró la asignación con el ID de orden '
		                  || P_ID_ORDEN
		                  || ' y ID de mecánico '
		                  || P_ID_MECANICO;
		DBMS_OUTPUT.PUT_LINE(V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END;
/

CREATE OR REPLACE PROCEDURE ASIGNAR_MECANICO(
	P_ID_ORDEN ASIGNACIONES.ID_ORDEN%TYPE,
	P_ID_MECANICO ASIGNACIONES.ID_MECANICO%TYPE
) AS
	V_ERRORMENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
	INSERT INTO ASIGNACIONES (
		ID_ORDEN,
		ID_MECANICO,
		FECHA_ASIGNACION
	) VALUES (
		P_ID_ORDEN,
		P_ID_MECANICO,
		SYSDATE
	);
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		V_ERRORMENSAJE := 'Error: No se encontró la asignación con el ID de orden '
		                  || P_ID_ORDEN
		                  || ' y ID de mecánico '
		                  || P_ID_MECANICO;
		DBMS_OUTPUT.PUT_LINE(V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN DUP_VAL_ON_INDEX THEN
		V_ERRORMENSAJE := 'Error: Se quiso insertar una pk repetida: Id de orden'
		                  || P_ID_ORDEN
		                  || ' y ID de mecánico '
		                  || P_ID_MECANICO;
		DBMS_OUTPUT.PUT_LINE(V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END;
/

-- Actualizar el estado de la orden de trabajo.
CREATE OR REPLACE PROCEDURE ACTUALIZAR_ESTADO_ORDEN (
	P_ID_ORDEN ORDEN_TRABAJO.ID_ORDEN%TYPE,
	P_ID_ESTADO_ORDEN ORDEN_TRABAJO.ID_ESTADO_ORDEN%TYPE
) AS
	V_ERRORMENSAJE HISTORIAL_ERRORES.DESCRIPCION%TYPE;
BEGIN
	UPDATE ORDEN_TRABAJO
	SET
		ID_ESTADO_ORDEN = P_ID_ESTADO_ORDEN
	WHERE
		ID_ORDEN = P_ID_ORDEN;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		V_ERRORMENSAJE := 'No se encontró la orden con el ID '
		                  || P_ID_ORDEN;
		DBMS_OUTPUT.PUT_LINE(V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
	WHEN OTHERS THEN
		V_ERRORMENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE('Error: '
		                     || V_ERRORMENSAJE);
		INSERT INTO HISTORIAL_ERRORES (
			ERROR_ID,
			DESCRIPCION
		) VALUES (
			SEQ_HISTORIAL_ERRORES.NEXTVAL,
			V_ERRORMENSAJE
		);
END;
/

BEGIN
	AGREGAR_CLIENTE('Carlos', 'Rodriguez', '8-756-123', 'Barrio 1', 'Ciudad de Panamá', 10008, '61234567', 'carlos@example.com', 10001, 10001);
	AGREGAR_CLIENTE('Maria', 'Perez', '8-999-215', 'Barrio 2', 'Caña', 10002, '62345678', 'maria@example.com', 10002, 10002);
	AGREGAR_CLIENTE('Jose', 'Gomez', '8-1000-2020', 'Barrio 3', 'David', 10002, '63456789', 'jose@example.com', 10003, 10003);
	AGREGAR_CLIENTE('Juan', 'Baloy', '8-1001-2000', 'Barrio 4', 'Calidonia', 10008, '65552147', 'juan@example.com', 10003, 10003);
	AGREGAR_CLIENTE('Marta', 'Klerk', '8-856-1010', 'Barrio 5', 'Chitr', 10006, '65577147', 'marta@example.com', 10003, 10003);
	REGISTRAR_AUTOMOVIL(10001, 'Sedan', 'ABC123', 'Toyota', 'Rojo');
	REGISTRAR_AUTOMOVIL(10002, 'SUV', 'DEF456', 'Nissan', 'Azul');
	REGISTRAR_AUTOMOVIL(10003, 'Pickup', 'GHI789', 'Ford', 'Blanco');
	REGISTRAR_AUTOMOVIL(10004, 'CRV', 'AY14J7', 'Honda', 'Gris');
	REGISTRAR_AUTOMOVIL(10005, 'Hilux', 'BY84J0', 'Toyota', 'Blanco');
	REGISTRAR_MECANICO('Ana', 'Martinez', '8-999-1252', 'Barrio 3', 'Calidonia', 10008, '61234567', 'ana.martinez@example.com', 10001, 10001);
	REGISTRAR_MECANICO('Pedro', 'Lopez', '8-564-214', 'Barrio 4', 'Las Cumbres', 10008, '62345678', 'pedro.lopez@example.com', 10002, 10002);
	REGISTRAR_MECANICO('Marta', 'Gonzalez', '8-998-124', 'Barrio 5', 'Tumba muerto', 10008, '63456789', 'marta.gonzalez@example.com', 10003, 10003);
	REGISTRAR_MECANICO('Enrique', 'Siu', '8-1000-123', 'Barrio 7', 'Volcan', 10002, '60005278', 'enrique.siu@example.com', 10003, 10003);
	REGISTRAR_MECANICO('Juan', 'Villagran', '8-999-100', 'Barrio 9', 'Volcan', 10002, '67789652', 'juan.villagran@example.com', 10003, 10003);
	AGREGAR_SERVICIO('Cambio de aceite', 30.00);
	AGREGAR_SERVICIO('Alineacion y balanceo', 50.00);
	AGREGAR_SERVICIO('Revision de frenos', 40.00);
	REGISTRAR_CITA(10001, TO_DATE('2024-07-15', 'YYYY-MM-DD'), TO_DATE('2024-07-20', 'YYYY-MM-DD'));
	REGISTRAR_CITA(10002, TO_DATE('2024-07-16', 'YYYY-MM-DD'), TO_DATE('2024-07-21', 'YYYY-MM-DD'));
	REGISTRAR_CITA(10003, TO_DATE('2024-07-17', 'YYYY-MM-DD'), TO_DATE('2024-07-22', 'YYYY-MM-DD'));
	REGISTRAR_CITA(10004, TO_DATE('2024-07-18', 'YYYY-MM-DD'), TO_DATE('2024-07-23', 'YYYY-MM-DD'));
	REGISTRAR_CITA(10005, TO_DATE('2024-07-19', 'YYYY-MM-DD'), TO_DATE('2024-07-24', 'YYYY-MM-DD'));
	REGISTRAR_ORDEN_TRABAJO(10001, 10001, 10001, 10001, TO_DATE('2024-07-10', 'YYYY-MM-DD'), TO_DATE('2024-07-15', 'YYYY-MM-DD'));
	REGISTRAR_ORDEN_TRABAJO(10002, 10003, 10002, 10002, TO_DATE('2024-07-11', 'YYYY-MM-DD'), TO_DATE('2024-07-16', 'YYYY-MM-DD'));
	REGISTRAR_ORDEN_TRABAJO(10003, 10003, 10003, 10003, TO_DATE('2024-07-12', 'YYYY-MM-DD'), TO_DATE('2024-07-17', 'YYYY-MM-DD'));
	REGISTRAR_ORDEN_TRABAJO(10004, 10003, 10004, 10004, TO_DATE('2024-07-13', 'YYYY-MM-DD'), TO_DATE('2024-07-18', 'YYYY-MM-DD'));
	REGISTRAR_ORDEN_TRABAJO(10005, 10004, 10005, 10005, TO_DATE('2024-07-14', 'YYYY-MM-DD'), TO_DATE('2024-07-19', 'YYYY-MM-DD'));
	REGISTRAR_SERVICIO_ORDEN(10001, 10001, 28.00);
	REGISTRAR_SERVICIO_ORDEN(10002, 10002, 35.25);
	REGISTRAR_SERVICIO_ORDEN(10003, 10003, 45.75);
	REGISTRAR_SERVICIO_ORDEN(10004, 10001, 25.20);
	REGISTRAR_SERVICIO_ORDEN(10005, 10002, 32.52);
	ASIGNAR_MEC_ORDEN(10001, 10001, TO_DATE('2024-07-10', 'YYYY-MM-DD'));
	ASIGNAR_MEC_ORDEN(10002, 10002, TO_DATE('2024-07-10', 'YYYY-MM-DD'));
	ASIGNAR_MEC_ORDEN(10003, 10003, TO_DATE('2024-07-10', 'YYYY-MM-DD'));
	PROC_GENERAR_FACTURA(10002);
	PROC_GENERAR_FACTURA(10003);
	PROC_GENERAR_FACTURA(10004);
 -- Invocar actualizar_cliente
	ACTUALIZAR_CLIENTE(
		P_ID_CLIENTE => 10001,
		P_NOMBRE => 'Juan',
		P_APELLIDO => 'Perez',
		P_CIP => '1234567890',
		P_BARRIADA => 'Barrio Nuevo',
		P_CIUDAD => 'Ciudad de Panama',
		P_ID_PROVINCIA => 10001
	);
 -- Invocar actualizar_automovil
	ACTUALIZAR_AUTOMOVIL(
		P_ID_AUTOMOVIL => 10001,
		P_MODELO => 'Corolla 2024',
		P_MATRICULA => 'ABC1234',
		P_MARCA => 'Toyota',
		P_COLOR => 'Rojo'
	);
 -- Invocar actualizar_cita
	ACTUALIZAR_CITA( P_ID_CITA => 10001, P_FECHA_ASIGNACION => TO_DATE('2024-07-03', 'YYYY-MM-DD') );
 -- Invocar actualizar_asignacion_mecanico
	REMOVER_MECANICO(
		P_ID_ORDEN => 10001,
		P_ID_MECANICO => 10001
	);
 --invocar asignar mecancico
	ASIGNAR_MECANICO(
		P_ID_ORDEN => 10001,
		P_ID_MECANICO => 10001
	);
 -- Invocar actualizar_estado_orden
	ACTUALIZAR_ESTADO_ORDEN(
		P_ID_ORDEN => 10001,
		P_ID_ESTADO_ORDEN => 10004
	);
END;
/

CREATE OR REPLACE VIEW VISTA_MECANICOS_ORDENES AS
	SELECT
		M.ID_MECANICO         AS "ID Mecánico",
		M.NOMBRE
		|| ' '
		|| M.APELLIDO         AS "Nombre Completo",
		OT.ID_ORDEN           AS "ID Orden",
		OT.FECHA_PUBLICACION  AS "Fecha Publicación Orden",
		ASIG.FECHA_ASIGNACION AS "Fecha Asignación"
	FROM
		MECANICO      M
		INNER JOIN ASIGNACIONES ASIG
		ON M.ID_MECANICO = ASIG.ID_MECANICO
		INNER JOIN ORDEN_TRABAJO OT
		ON ASIG.ID_ORDEN = OT.ID_ORDEN;

CREATE OR REPLACE VIEW VISTA_FACTURAS_TALLER AS
	SELECT
		F.ID_FACTURA    AS "ID Factura",
		C.NOMBRE
		|| ' '
		|| C.APELLIDO   AS "Nombre Cliente",
		OT.ID_ORDEN     AS "ID Orden",
		F.FECHA_EMISION AS "Fecha Emisión",
		F.IMPORTE       AS "Importe",
		F.IMPUESTO      AS "Impuesto",
		F.TOTAL         AS "Total"
	FROM
		FACTURA       F
		INNER JOIN CLIENTE C
		ON F.ID_CLIENTE = C.ID_CLIENTE
		INNER JOIN ORDEN_TRABAJO OT
		ON F.ID_ORDEN = OT.ID_ORDEN;

CREATE OR REPLACE VIEW VISTA_AUTOS_TALLER AS
	SELECT
		A.ID_AUTOMOVIL AS "ID Automovil",
		C.NOMBRE
		|| ' '
		|| C.APELLIDO  AS "Nombre Cliente",
		A.MODELO       AS "Modelo",
		A.MATRICULA    AS "Matricula",
		A.MARCA        AS "Marca",
		A.COLOR        AS "Color"
	FROM
		AUTOMOVIL A
		INNER JOIN CLIENTE C
		ON A.ID_CLIENTE = C.ID_CLIENTE;

CREATE OR REPLACE VIEW VISTA_CITAS_CLIENTES AS
	SELECT
		C.ID_CLIENTE        AS "ID Cliente",
		C.NOMBRE
		|| ' '
		|| C.APELLIDO       AS "Nombre Completo",
		CI.ID_CITA          AS "ID Cita",
		CI.FECHA_SOLICITUD  AS "Fecha Solicitud",
		CI.FECHA_ASIGNACION AS "Fecha Asignación"
	FROM
		CLIENTE C
		INNER JOIN CITA CI
		ON C.ID_CLIENTE = CI.ID_CLIENTE;

CREATE OR REPLACE VIEW VISTA_CLIENTES AS
	SELECT
		C.ID_CLIENTE,
		C.NOMBRE        AS NOMBRE_CLIENTE,
		C.APELLIDO      AS APELLIDO_CLIENTE,
		C.CIP,
		C.BARRIADA,
		C.CIUDAD,
		P.NOMBRE        AS NOMBRE_PROVINCIA,
		CT.NUM_TELEFONO,
		TTC.DESCRIPCION AS TIPO_TELEFONO,
		CE.EMAIL,
		TCE.DESCRIPCION AS TIPO_EMAIL
	FROM
		CLIENTE             C
		LEFT JOIN PROVINCIA P
		ON C.ID_PROVINCIA = P.ID_PROVINCIA
		LEFT JOIN CLIENTE_TEL CT
		ON C.ID_CLIENTE = CT.ID_CLIENTE
		LEFT JOIN TIPOS_TEL_CLIENTE TTC
		ON CT.ID_TEL_CLIENTE = TTC.ID_TEL_CLIENTE
		LEFT JOIN CLIENTE_EMAIL CE
		ON C.ID_CLIENTE = CE.ID_CLIENTE
		LEFT JOIN TIPOS_EMAIL_CLIENTE TCE
		ON CE.ID_EMAIL_CLIENTE = TCE.ID_EMAIL_CLIENTE;

CREATE OR REPLACE VIEW VISTA_HISTORIAL_SERVICIOS AS
	SELECT
		A.ID_AUTOMOVIL         AS "ID Automovil",
		A.MODELO               AS "Modelo",
		A.MATRICULA            AS "Matricula",
		S.ID_SERVICIO          AS "ID Servicio",
		S.DESCRIPCION          AS "Descripción",
		OS.COSTO_PERSONALIZADO AS "Costo"
	FROM
		AUTOMOVIL      A
		INNER JOIN ORDEN_TRABAJO OT
		ON A.ID_AUTOMOVIL = OT.ID_AUTOMOVIL
		INNER JOIN ORDEN_SERVICIO OS
		ON OT.ID_ORDEN = OS.ID_ORDEN
		INNER JOIN SERVICIO S
		ON OS.ID_SERVICIO = S.ID_SERVICIO;

CREATE OR REPLACE VIEW VISTA_AUDITORIA_ORDENES AS
	SELECT
		AUD_COD                AS CODIGO_AUDITORIA,
		AUD_ID_ORDEN           AS ORDEN_ID,
		AUD_ID_ESTADO_ORDEN    AS ESTADO_ORDEN_ID,
		AUD_ID_CLIENTE         AS CLIENTE_ID,
		AUD_ID_CITA            AS CITA_ID,
		AUD_ID_AUTOMOVIL       AS AUTOMOVIL_ID,
		AUD_FECHA_PUBLICACION  AS FECHA_PUBLICACION,
		AUD_FECHA_FIN          AS FECHA_FIN,
		AUD_FECHA_MODIFICACION AS FECHA_MODIFICACION,
		AUD_ACCION_REALIZADA   AS ACCION_REALIZADA
	FROM
		AUD_ORDENES_TRABAJO;

SELECT
	*
FROM
	VISTA_MECANICOS_ORDENES;

SELECT
	*
FROM
	VISTA_FACTURAS_TALLER;

SELECT
	*
FROM
	VISTA_AUTOS_TALLER;

SELECT
	*
FROM
	VISTA_CITAS_CLIENTES;

SELECT
	*
FROM
	VISTA_CLIENTES;

SELECT
	*
FROM
	VISTA_HISTORIAL_SERVICIOS;

SELECT
	*
FROM
	VISTA_AUDITORIA_ORDENES;